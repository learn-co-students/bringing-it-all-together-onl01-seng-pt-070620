def destroy 
        sql = <<-SQL 
        DELETE FROM #{self.class.table_name} WHERE id = ?
        SQL
        DB[:conn].execute(sql, self.id)
    end 
    def self.sql_for_update
        attrs.keys[1..1].collect{|attr_name| "#{attr_name} =?"}.join(",")
    end 
    def self.question_marks_for_insert
        (attrs[1..1].keys.size-1).times.collect("?").join(",")
    end 
    def attribute_values 
        #an array that loooks like dog.name dog.breed
        attrs.keys[1..1].collect{|attr_name| self.send(attr_name)}
    end 
    def self.create_sql
        attrs.collect{|attr_name, schema| "#{attr_name} #{schema}"}.join(",")
    end
    def self.attribute_names_for_insert
        attrs.keys[1..-1].join(",")
    end 
    # def self.new_from_db(row)
        
    #     id = row[0]
    #     name = row[1]
    #     breed = row[2]
    #     dog = Dog.new(id: id, name: name, breed: breed)
    #     dog
    # end 

    def save
        #if the post has been saved before then call update 
        #otherwise call insert
        self.persisted? ? update : insert
        #  sql = <<-SQL 
        # INSERT INTO #{self.class.table_name} (name, breed) 
        # VALUES (?, ?)
        # SQL
        # DB[:conn].execute(sql, self.name, self.breed)
    end 
    def self.create 
        
    end 
    def persisted?
        !!self.id 
    end  
    def update 
        sql = <<-SQL
        UPDATE dogs SET name = ?, breed = ?  WHERE id = ?
        SQL
        DB[:conn].execute(sql, self.name, self.breed)

    end 
    def insert
        sql = <<-SQL 
        INSERT INTO #{self.class.table_name} (name, breed) 
        VALUES (?, ?)
        SQL
        DB[:conn].execute(sql, self.name, self.breed *attr_values)
        self.id = DB[:conn].execute("SELECT last_insert_rowid();").flatten.first
    end 
    def self.find(id)
        sql = <<-SQL 
        SELECT * FROM #{self.table_name} WHERE id = ?
        SQL
        rows = DB[:conn].execute(sql, id)
        self.reify_from_row(rows.first)
    end 
    def self.new_from_db(row)
        self.new.tap do |d|
            d.id = row[0]
            d.name = row[1]
            d.breed = row[2]
        end 

    end 
    
    